package com.android.lixiang.cheshang.presenter.data.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HrAccount = new Property(1, String.class, "hrAccount", false, "HR_ACCOUNT");
        public final static Property DeviceId = new Property(2, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Tel = new Property(4, String.class, "tel", false, "TEL");
        public final static Property ShopId = new Property(5, String.class, "shopId", false, "SHOP_ID");
        public final static Property ShopName = new Property(6, String.class, "shopName", false, "SHOP_NAME");
        public final static Property ShopAddress = new Property(7, String.class, "shopAddress", false, "SHOP_ADDRESS");
        public final static Property DeptId = new Property(8, String.class, "deptId", false, "DEPT_ID");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"HR_ACCOUNT\" TEXT," + // 1: hrAccount
                "\"DEVICE_ID\" TEXT," + // 2: deviceId
                "\"NAME\" TEXT," + // 3: name
                "\"TEL\" TEXT," + // 4: tel
                "\"SHOP_ID\" TEXT," + // 5: shopId
                "\"SHOP_NAME\" TEXT," + // 6: shopName
                "\"SHOP_ADDRESS\" TEXT," + // 7: shopAddress
                "\"DEPT_ID\" TEXT);"); // 8: deptId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String hrAccount = entity.getHrAccount();
        if (hrAccount != null) {
            stmt.bindString(2, hrAccount);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(5, tel);
        }
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(6, shopId);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(7, shopName);
        }
 
        String shopAddress = entity.getShopAddress();
        if (shopAddress != null) {
            stmt.bindString(8, shopAddress);
        }
 
        String deptId = entity.getDeptId();
        if (deptId != null) {
            stmt.bindString(9, deptId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String hrAccount = entity.getHrAccount();
        if (hrAccount != null) {
            stmt.bindString(2, hrAccount);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(5, tel);
        }
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(6, shopId);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(7, shopName);
        }
 
        String shopAddress = entity.getShopAddress();
        if (shopAddress != null) {
            stmt.bindString(8, shopAddress);
        }
 
        String deptId = entity.getDeptId();
        if (deptId != null) {
            stmt.bindString(9, deptId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // hrAccount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shopId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // shopName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shopAddress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // deptId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHrAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShopId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setShopName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShopAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeptId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
